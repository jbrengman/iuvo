about
=====

dead simple crontab powered job scheduling for django.

setup
=====
install via pip::

    pip install django-crontab

add it to installed apps in django settings.py::

    INSTALLED_APPS = (
        'django_crontab',
        ...
    )

now create a new method that should be executed by cron every 5 minutes, f.e. in `myproject/myapp/cron.py`::

    def my_scheduled_job():
      pass

now add this to your settings.py::

    CRONJOBS = [
        ('*/5 * * * *', 'myproject.myapp.cron.my_scheduled_job')
    ]

you can also define positional and keyword arguments which let you call django management commands::

    CRONJOBS = [
        ('*/5 * * * *', 'myproject.myapp.cron.other_scheduled_job', ['arg1', 'arg2'], {'verbose': 0}),
        ('0   4 * * *', 'django.core.management.call_command', ['clearsessions']),
    ]

finally run this command to add all defined jobs from `CRONJOBS` to crontab (of the user which you are running this command with)::

    python manage.py crontab add

removing all defined jobs is straight forward::

    python manage.py crontab remove

config
======
there are a bunch of setting vars to customize behavior. each of this comes with default values that should properly fit. if not, feel free to overwrite.

CRONJOBS
  - list of jobs, each defined as tuple:

    - format 1:

      1. required: cron timing (in usual format: http://en.wikipedia.org/wiki/Cron#Format)
      2. required: the python module path to the method
      3. optional: a job specific suffix (f.e. to redirect out/err to a file, default: '')

    - format 2:

      1. required: cron timing (in usual format: http://en.wikipedia.org/wiki/Cron#Format)
      2. required: the python module path to the method
      3. optional: list of positional arguments for the method (default: [])
      4. optional: dict of keyword arguments for the method (default: {})
      5. optional: a job specific suffix (f.e. to redirect out/err to a file, default: '')

  - NOTE: Run "python manage.py crontab add" each time you change CRONJOBS in any way!
  - default: []
  - example::

        CRONJOBS = [
            ('*/5 * * * *', 'myproject.myapp.cron.my_scheduled_job'),

            # format 1
            ('0   0 1 * *', 'myproject.myapp.cron.my_scheduled_job', '> /tmp/last_scheduled_job.log'),

            # format 2
            ('0   0 1 * *', 'myproject.myapp.cron.other_scheduled_job', ['myapp']),
            ('0   0 * * 0', 'django.core.management.call_command', ['dumpdata', 'auth'], {'indent': 4}, '> /home/john/backups/last_sunday_auth_backup.json'),
        ]

CRONTAB_LOCK_JOBS
  - prevent starting a job if an old instance of the same job is still running
  - default: False
  - since 0.5.0

CRONTAB_EXECUTABLE
  - path to the crontab executable of your os
  - default: '/usr/bin/crontab'

CRONTAB_DJANGO_PROJECT_NAME
  - the name of your django project, used to build path path to manage.py and to mark the jobs in contrab via comment for later removing
  - default is read from DJANGO_SETTINGS_MODULE environment variable

CRONTAB_DJANGO_MANAGE_PATH
  - path to manage.py file (including the manage.py itself, i.e. '/home/john/web/manage.py')
  - default is build using DJANGO_PROJECT_NAME

CRONTAB_PYTHON_EXECUTABLE
  - path to the python interpreter executable used to run the scheduled job
  - default uses the interpreter executable used to `add` the jobs (via 'python manage.py crontab add')

CRONTAB_COMMAND_PREFIX
  - something you wanne do or declare before each job gets executed. A good point for environment variables.
  - default: '' (empty string)
  - example: 'STAGE=production'

CRONTAB_COMMAND_SUFFIX
  - something you wanne do after each job was executed.
  - default: '' (empty string)
  - example: (do you know a good example?)

CRONTAB_COMMENT
  - used for marking the added contab-lines for removing, default value includes project name to distinguish multiple projects on the same host and user
  - default: 'django-crontabs for ' + CRONTAB_DJANGO_PROJECT_NAME

contributors
=======
arski cinghiale meric426

license
=======
MIT-License, see LICENSE file.


Functions used to test crontab:
  def test():
      print('test')


  def test_user_query():
      user = User.objects.get(id=1)
      print(user.username)


  def test_contact_create():
      user = User.objects.get(id=1)
      Contact.objects.create(owner=user, email='tester@gmail.com',
                             name='tester', phone_str='5555555555')


  def status_change_test():
      event = Event.objects.get(id=5)
      # if event is None:
      #     user = User.objects.get(id=1)
      #     contact = Contact.objects.get(name='tester')
      #     Event.objects.create(owner=user, contacts=contact, location='here')
      if event.status is None:
          event.status = 1
          event.save()
      elif event.status == 1:
          event.status = 2
          event.save()
      elif event.status == 2:
          event.status = 3
          event.save()
      elif event.status == 3:
          event.status = 4
          event.save()
      else:
          pass

  user = User.objects.get(username='admin')
  user.email


  def test_send_notification():
      user = User.objects.get(username='admin')
      send_mail('Test email', 'It works', 'jwhitecf@gmail.com',
                [user.email], fail_silently=False)


  def send_notifications():
    now = timezone.now()
    events_pre = Event.objects.filter(status=0)
    events_started = Event.objects.filter(status=1)
    events_ended = Event.objects.filter(status=2)

    for event in events_ended:
        if now > event.notify_date:
            # send notification to user's contacts.
            contacts = Contact.objects.filter(owner=event.owner)
            eddress_list = []
            for contact in contacts:
                eddress_list.append(contact.email)
            subject = "YOUR FRIEND MAY NEED HELP!!"
            body = """You are receiving this email, because a friend has assigned
                      you as an emergency contact at Iuvo.com.  They have scheduled an
                      event which is past its end time, and they have not checked in.
                      Please try to contact your friend to see if they are safe.  Thank you.

                      Regards,
                      Iuvo Staff"""
            send_email(eddress_list, subject, body)
            event.status = 3
            event.save()

    for event in events_started:
        if now > event.end_date:
            # send notification to user asking them to check in.
            eddress_list = [event.owner.email]
            subject = "Iuvo event notice"
            body = """The event which you've scheduled at Iuvo.com has ended.
                      Please, log into Iuvo.com and submit a check-in for your event.

                      Regards,
                      Iuvo Staff"""
            send_email(eddress_list, subject, body)
            event.status = 2
            event.save()

    for event in events_pre:
        if now > event.start_date:
            # send notification to user telling them that event has started.
            eddress = [event.owner.email]
            subject = "Iuvo event notice"
            body = """The event which you've scheduled at Iuvo.com has started.
                      If you've canceled your plans, Please log into your account
                      and cancel the event.

                      Regards,
                      Iuvo Staff"""
            send_email(eddress, subject, body)
            event.status = 1
            event.save()

  def send_3day_notifications():
      now = timezone.now()
      events_notified = Event.objects.filter(status=3)
      events_post_3day = Event.objects.filter(status=4)

      for event in events_post_3day:
          delta = now - event.end_date
          if delta.days % 3 == 0:
              eddress_list = [event.owner.email]
              subject = "Iuvo event notice"
              body = """You had scheduled an event at Iuvo.com.  It is now """  + delta.days + """ days past
                        the end time for this event.  Please, log into your   account and
                        check-in or your account will be suspended.  Thank you.

                        Regards,
                        Iuvo Staff"""
              send_email(eddress_list, subject, body)

      for event in events_notified:
          delta = now - event.end_date
          # if delta.seconds / 60 > 3:
          if delta.days > 3:
              eddress_list = [event.owner.email]
              subject = "Iuvo event notice"
              body = """You had scheduled an event at Iuvo.com.  It is now 3  days past
                        the end time for this event.  Please, log into your   account and
                      check-in or your account will be suspended.  Thank you.

                      Regards,
                      Iuvo Staff"""
            send_email(eddress_list, subject, body)
            event.status = 4
            event.save()

def send_with_username():
    user = User.objects.get(username='admin')
    eddress_list = [user.email]
    body_template = loader.get_template('notifications/test.txt')
    # first = user.first_name
    # last = user.last_name
    body_context = Context({'first': user.first_name, 'last': user.last_name})
    body = body_template.render(body_context)
    subject_template = loader.get_template('notifications/test_email_subject.txt')
    subject_context = Context({})
    subject = subject_template.render(subject_context)
    # body = user.first_name + " " + user.last_name + ", are you getting this?"
    send_email(eddress_list, subject, body)